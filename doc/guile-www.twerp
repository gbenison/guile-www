\input texinfo  @c -*-texinfo-*-
@c %**start of header
@setfilename guile-www.info
@settitle @code{Guile-WWW} Modules Reference
@c %**end of header
@code{}
@setchapternewpage odd

@c ---------------------------------------------------------------------------
@dircategory Guile modules
@direntry
* Guile-WWW: (guile-www).         Scheme modules for WWW interaction
@end direntry

@c ---------------------------------------------------------------------------
@include version.texi

@c ---------------------------------------------------------------------------
@ifinfo
This file is the Guile-WWW Modules Reference

Copyright @copyright{} 2001,2002,2003,2004 Free Software Foundation, Inc.

Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

@ignore
Permission is granted to process this file through TeX and
print the results, provided the printed document carries a copying
permission notice identical to this one except for the removal of this
paragraph (this paragraph not being relevant to the printed manual).

@end ignore
Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided also that the
sections entitled ``Copying'' and ``GNU General Public License'' are
included exactly as in the original, and provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be stated in a translation
approved by the Free Software Foundation.

@end ifinfo
@titlepage
@sp 10
@comment The title is printed in a large font.
@center @titlefont{Guile-WWW Modules Reference}

@c ---------------------------------------------------------------------------
@c The following two commands start the copyright page.
@page
@vskip 0pt plus 1filll
Copyright @copyright{} 2001,2002,2003,2004 Free Software Foundation, Inc.

     Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice are
preserved on all copies.

     Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided also
that the sections entitled ``Copying'' and ``GNU General Public
License'' are included exactly as in the original, and provided that the
entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

     Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that this permission notice may be stated in a
translation approved by the Free Software Foundation.

@end titlepage

@c ---------------------------------------------------------------------------
@node Top
@top The (www *) Modules

Guile-WWW is a set of Guile Scheme modules providing support for navigating
HTTP connections, parsing URLs, handling CGI operations, and fetching WWW
resources.  This document corresponds to guile-www @value{VERSION}.

The basic modules are named @code{(www FOO)}, server utilty modules
are named @code{(www server-utils FOO)}, and data modules are named
@code{(www data FOO)}.

@menu
Basic
* http::                Navigate HTTP connections.
* url::                 Parse URLs, including decoding.
* cgi::                 Write CGI scripts painlessly.
* main::                Fetch world-wide-web resources.
* url-coding::          URL decode and encode, only.

Server Utilities
* parse-request::       Read HTTP first line and headers.
* filesystem::          Work with the local filesystem.
* answer::              HTTP connection handling and responses.
* log::                 Love notes to other programs.

Data
* http-status::         The dreaded 404 lives here.
* content-type::        Content-Type clues from filenames.


* Procedure Index::
@end menu

@c ---------------------------------------------------------------------------
@c ---------------------------------------------------------------------------
@node    http
@chapter http

The @code{(www http)} module includes procedures for high-level HTTP
operation; and low-level HTTP message object access.

@section High-Level HTTP Operation

@twerpdoc (http:open)
@twerpdoc (http:request)
@twerpdoc (http:get)
@twerpdoc (http:post-form)

@section Low-Level HTTP Message Object Access

@twerpdoc (http:message-version)
@twerpdoc (http:message-status-code)
@twerpdoc (http:message-status-text)
@twerpdoc (http:message-status-ok?)
@twerpdoc (http:status-ok?)
@twerpdoc (http:message-body)
@twerpdoc (http:message-headers)
@twerpdoc (http:message-header)

@c ---------------------------------------------------------------------------
@node    url
@chapter url

The @code{(www url)} module provides procedures for high-level url
object conversion, low-level url object construction and access,
and character decoding/encoding.

@section High-Level URL Object Conversion

@twerpdoc (url:parse)
@twerpdoc (url:unparse)

@section Low-Level URL Object Construction

@twerpdoc (url:make)
@twerpdoc (url:make-http)
@twerpdoc (url:make-ftp)
@twerpdoc (url:make-mailto)

@section Low-Level URL Object Access

@twerpdoc (url:scheme)
@twerpdoc (url:address)
@twerpdoc (url:unknown)
@twerpdoc (url:user)
@twerpdoc (url:host)
@twerpdoc (url:port)
@twerpdoc (url:path)

@section Character Decoding/Encoding

@twerpdoc (url:decode)
@twerpdoc (url:encode)

@c ---------------------------------------------------------------------------
@node    cgi
@chapter cgi

The @code{(www cgi)} module provides procedures to support painlessly
writing Common Gateway Interface scripts to process interactive forms.
These scripts typically follow the following steps: initialization and
discovery, data transfer in, data transfer out.

@section Initialization and Discovery

@twerpdoc (cgi:init)
@twerpdoc (cgi:form-data?)
@twerpdoc (cgi:names)

@section Data Transfer In

@twerpdoc (cgi:getenv)
@twerpdoc (cgi:values)
@twerpdoc (cgi:value)
@twerpdoc (cgi:uploads)
@twerpdoc (cgi:upload)
@twerpdoc (cgi:cookies)
@twerpdoc (cgi:cookie)

@section Data Transfer Out

@twerpdoc (cgi:make-cookie)

@c ---------------------------------------------------------------------------
@node    main
@chapter main

The @code{(www main)} module provides a generic interface useful for
retriving data named by any URL.  The HTTP scheme is pre-registered.

@twerpdoc (www:set-protocol-handler!)
@twerpdoc (www:get)

@c ---------------------------------------------------------------------------
@node    url-coding
@chapter url-coding

The @code{(www url-coding)} module provides two procedures for decoding
and encoding URL strings for safe transmission according to RFC 1738.

@twerpdoc (url-coding:decode)
@twerpdoc (url-coding:encode)

@c ---------------------------------------------------------------------------
@node    parse-request
@chapter parse-request

The @code{(www server-utils parse-request)} module provides two procedures to
read the first line and the headers of an HTTP message on the input port.

@twerpdoc (read-first-line)
@twerpdoc (read-headers)

@c ---------------------------------------------------------------------------
@node    filesystem
@chapter filesystem

The @code{(www server-utils filesystem)} module provides procedures for
cleaning filenames, checking filesystem access, and mapping from a URL path to
a filename.

@twerpdoc (cleanup-filename)
@twerpdoc (access-forbidden?-proc)
@twerpdoc (upath->filename-proc)
@twerpdoc (filename->content-type)

@c ---------------------------------------------------------------------------
@node    answer
@chapter answer

The @code{(www server-utils answer)} module provides a simple wrapper
around the formatting/accounting requirements of a standard HTTP
response.  Additionally, the @code{#:rechunk-content} facility allows
some degree of performance tuning; a server may be able to achieve
better throughput with certain chunk sizes than with others.

@twerpdoc (mouthpiece)

Here is an example that uses most of the commands:

@example
(use-modules (www server-utils content-type) (scripts slurp))

(define STATUS (list #f #f))
(define M (mouthpiece (open-output-file "fake") STATUS))

(define (transmit-file filename)
  (M #:set-reply-status:success)
  (M #:add-header #:Connection "close")
  (M #:add-header #:Content-Type (filename->content-type
                                   filename "text/plain"))
  (M #:add-content (slurp filename))
  (format #t "rechunked: ~A\n"
          (M #:rechunk-content (* 8 1024)))
  (M #:send-reply))

(transmit-file "COPYING")
@print{} rechunked: (8192 8192 1605)
STATUS
@result{} (200 17989)
@end example

@c ---------------------------------------------------------------------------
@node    log
@chapter log

The @code{(www server-utils log)} module provides procedure generators for
writing log information to an output port.  Each generator is conventionally
named @code{log-SOMETHING-proc}.

@twerpdoc (log-http-response-proc)

@c ---------------------------------------------------------------------------
@node    http-status
@chapter http-status

The module @code{(www data http-status)} exports two data structures:
@code{*http-status*} and @code{*http-status*-META}, the latter an alist
describing the former with keys @code{#:source} and @code{#:layout}.

Here is a simple example using this module:

@example
(use-modules ((www data http-status)
              #:select (*http-status*)))

(define (h2 n)
  (format #f "<H2>~A ~A</H2>"
          n (assq-ref *http-status* n)))

(h2 404) @result{} "<H2>404 Not Found</H2>"
(h2 307) @result{} "<H2>307 Temporary Redirect</H2>"
@end example

@c ---------------------------------------------------------------------------
@node    content-type
@chapter content-type

The module @code{(www data content-type)} exports two data structures:
@code{*content-type-by-filename-extension*} and
@code{*content-type-by-filename-extension*-META}, the latter an alist
describing the former with keys @code{#:source} and @code{#:layout}.

@xref{filesystem}, procedure @code{filename->content-type}.

@c ---------------------------------------------------------------------------
@node    Procedure Index
@unnumbered Procedure Index

@printindex fn

@c ---------------------------------------------------------------------------
@contents

@c ---------------------------------------------------------------------------
@bye
