\input texinfo  @c -*-texinfo-*-
@c %**start of header
@setfilename guile-www.info
@settitle @code{Guile-WWW} Modules Reference
@paragraphindent 0
@c %**end of header
@code{}
@setchapternewpage odd
@twerpsetsearchpath (".")

@c ---------------------------------------------------------------------------
@dircategory Guile modules
@direntry
* Guile-WWW: (guile-www).         Scheme modules for WWW interaction.
@end direntry

@c ---------------------------------------------------------------------------
@include version.texi

@c ---------------------------------------------------------------------------
@ifinfo
This file is the Guile-WWW Modules Reference

Copyright @copyright{} 2007 Thien-Thi Nguyen

Copyright @copyright{} 2001, 2002, 2003, 2004, 2005,
   2006, 2007 Free Software Foundation, Inc.

Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

@ignore
Permission is granted to process this file through TeX and
print the results, provided the printed document carries a copying
permission notice identical to this one except for the removal of this
paragraph (this paragraph not being relevant to the printed manual).

@end ignore
Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided also that the
sections entitled ``Copying'' and ``GNU General Public License'' are
included exactly as in the original, and provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be stated in a translation
approved by the Free Software Foundation.

@end ifinfo
@titlepage
@sp 10
@comment The title is printed in a large font.
@center @titlefont{Guile-WWW Modules Reference}

@c ---------------------------------------------------------------------------
@c The following two commands start the copyright page.
@page
@vskip 0pt plus 1filll
Copyright @copyright{} 2007 Thien-Thi Nguyen

Copyright @copyright{} 2001, 2002, 2003, 2004, 2005,
   2006, 2007 Free Software Foundation, Inc.

Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice are
preserved on all copies.

Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided also
that the sections entitled ``Copying'' and ``GNU General Public
License'' are included exactly as in the original, and provided that the
entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that this permission notice may be stated in a
translation approved by the Free Software Foundation.

@end titlepage

@c ---------------------------------------------------------------------------
@node Top
@top The (www *) Modules

Guile-WWW is a set of Guile Scheme modules providing support for navigating
HTTP connections, parsing URLs, handling CGI operations, and fetching WWW
resources.  This document corresponds to Guile-WWW @value{VERSION}.

The basic modules are named @code{(www FOO)}, server utilty modules
are named @code{(www server-utils FOO)}, and data modules are named
@code{(www data FOO)}.

@menu
Basic
* http::                Navigate HTTP connections.
* url::                 Parse URLs, including decoding.
* cgi::                 Write CGI scripts painlessly.
* main::                Fetch world-wide-web resources.
* url-coding::          URL decode and encode, only.
* utcsec::              Seconds after epoch, UTC.

Server Utilities
* big-dishing-loop::    Customizable listener and dispatch.
* parse-request::       Read HTTP first line and headers.
* filesystem::          Work with the local filesystem.
* cgi-prep::            Prepare environment for CGI handoff.
* cookies::             Handling bits of client-side state.
* answer::              HTTP connection handling and responses.
* log::                 Love notes to other programs.

Data
* http-status::         The dreaded 404 lives here.
* content-type::        Content-Type clues from filenames.


* Procedure Index::
@end menu

@c ---------------------------------------------------------------------------
@c ---------------------------------------------------------------------------
@node    http
@chapter http

The @code{(www http)} module includes procedures for high-level HTTP
operation, low-level HTTP message object access, and common messages.

@section High-Level HTTP Operation

@twerpdoc (http:open)
@twerpdoc (http:request)

@section Low-Level HTTP Message Object Access

@twerpdoc (http:message-version)
@twerpdoc (http:message-status-code)
@twerpdoc (http:message-status-text)
@twerpdoc (http:message-status-ok?)
@twerpdoc (http:status-ok?)
@twerpdoc (http:message-body)

An HTTP message header is represented by a pair.  The @sc{car} is a
symbol representing the header name, and the @sc{cdr} is a string containing
the header text.  E.g.:

@example
'((date . "Thu, 29 May 1997 23:48:27 GMT")
  (server . "NCSA/1.5.1")
  (last-modified . "Tue, 06 May 1997 18:32:03 GMT")
  (content-type . "text/html")
  (content-length . "8097"))
@end example

Note: these symbols are all lowercase, although the original headers may be
mixed-case.  Clients using this library should keep this in mind, since Guile
symbols are case-sensitive.

@twerpdoc (http:message-headers)
@twerpdoc (http:message-header)

@section Common Messages

@twerpdoc (http:head)
@twerpdoc (http:get)
@twerpdoc (http:post-form)

@c ---------------------------------------------------------------------------
@node    url
@chapter url

The @code{(www url)} module provides procedures for high-level url
object conversion, low-level url object construction and access,
and character decoding/encoding.

@section High-Level URL Object Conversion

@twerpdoc (url:parse)
@twerpdoc (url:unparse)

@section Low-Level URL Object Construction

@twerpdoc (url:make)
@twerpdoc (url:make-http)
@twerpdoc (url:make-ftp)
@twerpdoc (url:make-mailto)

@section Low-Level URL Object Access

@twerpdoc (url:scheme)
@twerpdoc (url:address)
@twerpdoc (url:unknown)
@twerpdoc (url:user)
@twerpdoc (url:host)
@twerpdoc (url:port)
@twerpdoc (url:path)

@section Character Decoding/Encoding

@twerpdoc (url:decode)
@twerpdoc (url:encode)

@c ---------------------------------------------------------------------------
@node    cgi
@chapter cgi

The @code{(www cgi)} module provides procedures to support painlessly
writing Common Gateway Interface scripts to process interactive forms.
These scripts typically follow the following steps: initialization and
discovery, data transfer in, data transfer out.

@section Initialization and Discovery

@twerpdoc (cgi:init)
@twerpdoc (cgi:form-data?)
@twerpdoc (cgi:names)

@section Data Transfer In

@twerpdoc (cgi:getenv)
@twerpdoc (cgi:values)
@twerpdoc (cgi:value)
@twerpdoc (cgi:uploads)
@twerpdoc (cgi:upload)
@twerpdoc (cgi:cookies)
@twerpdoc (cgi:cookie)

@section Uncollated Form Data

With @code{cgi:values}, when a name occurs more than once, its associated
values are collated, thus losing information about the relative order of
different and intermingled names.  For this, you can use @code{cgi:nv-pairs}
to access the uncollated (albeit ordered) form data.

@twerpdoc (cgi:nv-pairs)

@c ---------------------------------------------------------------------------
@node    main
@chapter main

The @code{(www main)} module provides a generic interface useful for
retriving data named by any URL.  The URL scheme @code{http} is pre-registered.

@twerpdoc (www:set-protocol-handler!)
@twerpdoc (www:get)

There is also the convenience proc @code{www:http-head-get}.

@twerpdoc (www:http-head-get)

@c ---------------------------------------------------------------------------
@node    url-coding
@chapter url-coding

The @code{(www url-coding)} module provides two procedures for decoding
and encoding URL strings for safe transmission according to RFC 1738.

@twerpdoc (url-coding:decode)
@twerpdoc (url-coding:encode)

@c ---------------------------------------------------------------------------
@node    utcsec
@chapter utcsec
@twerpcommentary (include (www utcsec))

@twerpdoc (format-utcsec)
@twerpdoc (rfc1123-date<-)
@twerpdoc (<-rfc1123-date)
@twerpdoc (<-mtime)
@twerpdoc (<-ctime)
@twerpdoc (rfc1123-now)

@c ---------------------------------------------------------------------------
@node    big-dishing-loop
@chapter big-dishing-loop

The @code{(www server-utils big-dishing-loop)} module provides procedures
that facilitate generation of a customized listener/dispatch proc.

@twerpdoc (echo-upath)

@twerpdoc (make-big-dishing-loop)

The combination of @code{#:need-headers}, @code{#:need-input-port} and
@code{#:explicit-return} mean that the @code{#:GET-upath} proc can receive
anywhere from two to five arguments.  Here is a table of all the possible
combinations (1 means non-#f and 0 means #f):

@example
+----- #:explicit-return
| +--- #:need-input-port
| | +- #:need-headers
| | |
| | |  args to #:GET-upath proc
=====  ==============================
0 0 0  M upath
0 0 1  M upath headers
0 1 0  M upath in-port
0 1 1  M upath headers in-port
1 0 0  M upath return
1 0 1  M upath headers return
1 1 0  M upath in-port return
1 1 1  M upath headers in-port return
@end example

@c ---------------------------------------------------------------------------
@node    parse-request
@chapter parse-request

The @code{(www server-utils parse-request)} module provides procedures to
read the first line and the headers of an HTTP message on the input port.

@twerpdoc (read-first-line)
@twerpdoc (read-headers)

Sometimes you are interested in the body of the message but not the headers.
In this case, you can use @code{skip-headers} to quickly position the port.

@twerpdoc (skip-headers)

@c ---------------------------------------------------------------------------
@node    filesystem
@chapter filesystem

The @code{(www server-utils filesystem)} module provides procedures for
cleaning filenames, checking filesystem access, and mapping from a URL path to
a filename.

@twerpdoc (cleanup-filename)
@twerpdoc (access-forbidden?-proc)
@twerpdoc (upath->filename-proc)
@twerpdoc (filename->content-type)

@c ---------------------------------------------------------------------------
@node    cgi-prep
@chapter cgi-prep

Often the server cannot do everything by itself, and makes use of
external programs invoked in a @dfn{common gateway interface} environment.
These programs are also known as @dfn{CGI scripts}.

The @code{(www server-utils cgi-prep)} module provide a procedure to set up
such an environment.  Actually invoking the CGI script is not covered.

@twerpdoc (cgi-environment-manager)

Following is a simple example of how to use @code{cgi-environment-manager}.
A more realistic example would include port and connection management,
input validation, error handling, logging, etc.  First, we set up the
manager with more-or-less constant bindings.

@example
(define M (cgi-environment-manager
            '((server-software . "FooServe/24")
              (server-protocol . "HTTP/1.0")
              (server-port . 80))))
@end example

Later, we add connection-specific bindings.  We use @code{read-first-line}
from the @ref{parse-request} module.

@example
(define PORT ...)
(define UPATH (list-ref (read-first-line PORT) 1))
(define QMARK (string-index UPATH #\?))
(define CGI (substring UPATH 0 QMARK))

(M 'script-name CGI)
(M 'query-string (substring UPATH (1+ QMARK)))
@end example

Lastly, we spawn the child process, passing the constructed environment as
the second arg to @code{execle}, and drop the connection-specific bindings
afterwards.

@example
(let ((pid (primitive-fork)))
  (if (= 0 pid)
      (execle CGI (M #:environ-list) (list CGI)) ; child
      (waitpid pid)))                            ; parent

(M #:clear!)
@end example

Now we can re-use @code{M} for another connection.

@c ---------------------------------------------------------------------------
@node    cookies
@chapter cookies

Cookies are bits of client-side state the server can maintain through
designated HTTP response headers.  At this time (early 2006), there are two
specifications,
RFC2109@footnote{@uref{http://www.faqs.org/rfcs/rfc2109.html,RFC2109}}
and
RFC2965@footnote{@uref{http://www.faqs.org/rfcs/rfc2965.html,RFC2965}},
the latter obsoleting the former.

This chapter describes facilities for creating such headers, and parsing those
sent by the client.  Procedures that return trees are meant to be used with
the @code{mouthpiece} command @code{#:add-header} (@pxref{answer}).

@twerpdoc (rfc2109-set-cookie-string)
@twerpdoc (rfc2965-set-cookie2-tree)

Here is an example that demonstates both RFC2109 and RFC2965 formatting.
Notable differences: the keyword to specify the path is now capitalized; the
representation of the cookie's value is now double-quoted.

@example
;; RFC2109
(rfc2109-set-cookie-string 'war 'lose #:path "/ignorance/suffering")
@result{} "Set-Cookie: war=lose; path=/ignorance/suffering"

;; RFC2965
(use-modules ((www server-utils answer) #:select (walk-tree)))

(define TREE (rfc2965-set-cookie2-tree
              '(war lose #:Path "/ignorance/suffering" #:Discard)))

(car TREE)
@result{} #:Set-Cookie2

(walk-tree display (cdr TREE))
@print{} war="lose";Path="/ignorance/suffering";Discard;Version=1
@end example

To generate a cookie spec from the @code{Cookie} http response header sent by
a client, you can use @code{rfc2965-parse-cookie-header-value}.

@twerpdoc (rfc2965-parse-cookie-header-value)

RFC2965 also specifies some other small algorithms, some of which are codified
as procedures available in this module.

@twerpdoc (reach)

@c ---------------------------------------------------------------------------
@node    answer
@chapter answer

The @code{(www server-utils answer)} module provides a simple wrapper
around the formatting/accounting requirements of a standard HTTP
response.  Additionally, the @code{#:rechunk-content} facility allows
some degree of performance tuning; a server may be able to achieve
better throughput with certain chunk sizes than with others.

@twerpdoc (mouthpiece)

Here is an example that uses most of the @code{mouthpiece} commands:

@example
(use-modules (www server-utils content-type) (scripts slurp))

(define SERVER-NAME "Guile-WWW-example-server")
(define SERVER-VERSION "1.0")
(define STATUS (list #f #f))
(define M (mouthpiece (open-output-file "fake") STATUS))

(define (transmit-file filename)
  (M #:set-reply-status:success)
  (M #:add-header #:Server (string-append SERVER-NAME " "
                                          SERVER-VERSION))
  (M #:add-header #:Connection "close")
  (M #:add-header #:Content-Type (filename->content-type
                                  filename "text/plain"))
  (M #:add-content (slurp filename))
  (simple-format #t "rechunked: ~A\n"
                 (M #:rechunk-content (* 8 1024)))
  ;; We don't shutdown because this is a file port;
  ;; if it were a socket, we might specify 2 to
  ;; stop both reception and transmission.
  (M #:send-reply))

(transmit-file "COPYING")
@print{} rechunked: (8192 8192 1605)
STATUS
@result{} (200 17989)
@end example

For higher performance, you can preformat parts of the response, using
@code{CRLF}, and some lower-level convenience procedures.

@defvr {Scheme String} CRLF
The string ``\r\n''.
@end defvr

@twerpdoc (fs)
@twerpdoc (walk-tree)
@twerpdoc (string<-header-components)

Here is @code{transmit-file} from the above example, slightly modified to use
preformatted headers and @code{fs}:

@example
(define CONSTANT-HEADERS
  (string<-header-components
   #:Server (fs "~A ~A" SERVER-NAME SERVER-VERSION)
   #:Connection "close"))

(define (transmit-file filename)
  (M #:set-reply-status:success)
  (M #:add-header #t CONSTANT-HEADERS)
  (M #:add-header #:Content-Type (filename->content-type
                                  filename "text/plain"))
  (M #:add-content (slurp filename))
  (display (fs "rechunked: ~A\n" (M #:rechunk-content (* 8 1024))))
  (M #:send-reply))
@end example

Note that @code{mouthpiece} accepts trees for both @code{#:add-header} and
@code{#:add-content} commands.  Thus, the following two fragments give the
same result, although the latter is both more elegant and more efficient:

@example
;; Doing things "manually".
(walk-tree (lambda (string)
             (M #:add-content string))
           tree)

;; Letting the mouthpiece handle things.
(M #:add-content tree)
@end example

@c ---------------------------------------------------------------------------
@node    log
@chapter log

The @code{(www server-utils log)} module provides procedure generators for
writing log information to an output port.  Each generator is conventionally
named @code{log-SOMETHING-proc}.

@twerpdoc (log-http-response-proc)

@c ---------------------------------------------------------------------------
@node    http-status
@chapter http-status

The module @code{(www data http-status)} exports two data structures:
@code{*http-status*} and @code{*http-status*-META}, the latter an alist
describing the former with keys @code{#:source} and @code{#:layout}.

Here is a simple example using this module:

@example
(use-modules ((www data http-status)
              #:select (*http-status*)))

(define (h2 n)
  (format #f "<H2>~A ~A</H2>"
          n (assq-ref *http-status* n)))

(h2 404) @result{} "<H2>404 Not Found</H2>"
(h2 307) @result{} "<H2>307 Temporary Redirect</H2>"
@end example

@c ---------------------------------------------------------------------------
@node    content-type
@chapter content-type

The module @code{(www data content-type)} exports two data structures:
@code{*content-type-by-filename-extension*} and
@code{*content-type-by-filename-extension*-META}, the latter an alist
describing the former with keys @code{#:source} and @code{#:layout}.

@xref{filesystem}, procedure @code{filename->content-type}.

@c ---------------------------------------------------------------------------
@node    Procedure Index
@unnumbered Procedure Index

@printindex fn

@c ---------------------------------------------------------------------------
@contents

@c ---------------------------------------------------------------------------
@bye
